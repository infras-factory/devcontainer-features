name: Scheduled Test

on:
  schedule:
    # Run every Sunday at 00:00 UTC (weekly)
    - cron: '0 0 * * 0'
    # Or run on the 1st of every month at 00:00 UTC (monthly)
    # - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      test-latest-cli:
        description: 'Test with latest devcontainer CLI'
        required: false
        type: boolean
        default: true

jobs:
  compatibility-test:
    name: Compatibility Test
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        cli-version:
          - 'latest'
          - '0.50.0'  # Stable version for comparison
        base-image:
          - ubuntu:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install devcontainer CLI
        run: |
          if [ "${{ matrix.cli-version }}" == "latest" ]; then
            npm install -g @devcontainers/cli@latest
          else
            npm install -g @devcontainers/cli@${{ matrix.cli-version }}
          fi

          echo "Installed CLI version:"
          devcontainer --version

      - name: Test all features
        run: |
          for feature in ./src/*/; do
            if [ -f "$feature/devcontainer-feature.json" ]; then
              feature_name=$(basename "$feature")
              echo "Testing $feature_name with ${{ matrix.base-image }}"

              devcontainer features test \
                --skip-scenarios \
                --features "$feature_name" \
                --base-image "${{ matrix.base-image }}" \
                . || echo "::warning::Feature $feature_name failed on ${{ matrix.base-image }}"
            fi
          done

  report-issues:
    name: Report Issues
    runs-on: ubuntu-latest
    needs: compatibility-test
    if: failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create issue for failed tests
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const date = new Date().toISOString().split('T')[0];
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const issueTitle = `ðŸ”§ Scheduled Test Failed - ${date}`;
            const issueBody = `## Scheduled Test Report

            The scheduled compatibility test has failed.

            **Date**: ${date}
            **Workflow Run**: ${runUrl}

            ### Action Required
            Please review the failed tests and ensure compatibility with:
            - Latest base images
            - Latest devcontainer CLI versions

            ### Checklist
            - [ ] Review failed test logs
            - [ ] Update features if needed
            - [ ] Test fixes locally
            - [ ] Create PR with fixes

            ---
            *This issue was automatically created by the scheduled test workflow.*`;

            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'scheduled-test'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Scheduled Test Failed') &&
              issue.title.includes(date)
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['scheduled-test', 'compatibility']
              });
            }
